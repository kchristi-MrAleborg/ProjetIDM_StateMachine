/*
 * generated by Xtext
 */
package org.xtext.idm.projet.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.idm.projet.services.StateMachineGrammarAccess;

public class StateMachineParser extends AbstractContentAssistParser {
	
	@Inject
	private StateMachineGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.idm.projet.ui.contentassist.antlr.internal.InternalStateMachineParser createParser() {
		org.xtext.idm.projet.ui.contentassist.antlr.internal.InternalStateMachineParser result = new org.xtext.idm.projet.ui.contentassist.antlr.internal.InternalStateMachineParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
					put(grammarAccess.getDataAccess().getAlternatives(), "rule__Data__Alternatives");
					put(grammarAccess.getBoolAccess().getAlternatives(), "rule__Bool__Alternatives");
					put(grammarAccess.getOneStateAccess().getAlternatives(), "rule__OneState__Alternatives");
					put(grammarAccess.getAssignmentAccess().getAlternatives(), "rule__Assignment__Alternatives");
					put(grammarAccess.getStateMachineAccess().getGroup(), "rule__StateMachine__Group__0");
					put(grammarAccess.getStateMachineAccess().getGroup_8(), "rule__StateMachine__Group_8__0");
					put(grammarAccess.getIntegerVariableAccess().getGroup(), "rule__IntegerVariable__Group__0");
					put(grammarAccess.getIntegerVariableAccess().getGroup_5(), "rule__IntegerVariable__Group_5__0");
					put(grammarAccess.getBooleanVariableAccess().getGroup(), "rule__BooleanVariable__Group__0");
					put(grammarAccess.getBooleanVariableAccess().getGroup_5(), "rule__BooleanVariable__Group_5__0");
					put(grammarAccess.getIntegerDataAccess().getGroup(), "rule__IntegerData__Group__0");
					put(grammarAccess.getBooleanDataAccess().getGroup(), "rule__BooleanData__Group__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getCompositeStateAccess().getGroup(), "rule__CompositeState__Group__0");
					put(grammarAccess.getInitialStateAccess().getGroup(), "rule__InitialState__Group__0");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getOperationAccess().getGroup_4(), "rule__Operation__Group_4__0");
					put(grammarAccess.getBooleanAssignmentAccess().getGroup(), "rule__BooleanAssignment__Group__0");
					put(grammarAccess.getIntegerAssignmentAccess().getGroup(), "rule__IntegerAssignment__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getStateMachineAccess().getNameAssignment_2(), "rule__StateMachine__NameAssignment_2");
					put(grammarAccess.getStateMachineAccess().getVariablesAssignment_4(), "rule__StateMachine__VariablesAssignment_4");
					put(grammarAccess.getStateMachineAccess().getEventsAssignment_7(), "rule__StateMachine__EventsAssignment_7");
					put(grammarAccess.getStateMachineAccess().getEventsAssignment_8_1(), "rule__StateMachine__EventsAssignment_8_1");
					put(grammarAccess.getStateMachineAccess().getStatesAssignment_10(), "rule__StateMachine__StatesAssignment_10");
					put(grammarAccess.getStateMachineAccess().getStatesAssignment_11(), "rule__StateMachine__StatesAssignment_11");
					put(grammarAccess.getStateMachineAccess().getInitialStateAssignment_12(), "rule__StateMachine__InitialStateAssignment_12");
					put(grammarAccess.getStateMachineAccess().getTransitionsAssignment_13(), "rule__StateMachine__TransitionsAssignment_13");
					put(grammarAccess.getStateMachineAccess().getTransitionsAssignment_14(), "rule__StateMachine__TransitionsAssignment_14");
					put(grammarAccess.getIntegerVariableAccess().getNameAssignment_2(), "rule__IntegerVariable__NameAssignment_2");
					put(grammarAccess.getIntegerVariableAccess().getValueAssignment_5_1(), "rule__IntegerVariable__ValueAssignment_5_1");
					put(grammarAccess.getBooleanVariableAccess().getNameAssignment_2(), "rule__BooleanVariable__NameAssignment_2");
					put(grammarAccess.getBooleanVariableAccess().getValueAssignment_5_1(), "rule__BooleanVariable__ValueAssignment_5_1");
					put(grammarAccess.getIntegerDataAccess().getValueAssignment_1(), "rule__IntegerData__ValueAssignment_1");
					put(grammarAccess.getBooleanDataAccess().getValueAssignment_1(), "rule__BooleanData__ValueAssignment_1");
					put(grammarAccess.getEventAccess().getNameAssignment_1(), "rule__Event__NameAssignment_1");
					put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
					put(grammarAccess.getStateAccess().getOperationAssignment_4(), "rule__State__OperationAssignment_4");
					put(grammarAccess.getCompositeStateAccess().getNameAssignment_2(), "rule__CompositeState__NameAssignment_2");
					put(grammarAccess.getCompositeStateAccess().getStatesAssignment_4(), "rule__CompositeState__StatesAssignment_4");
					put(grammarAccess.getCompositeStateAccess().getStatesAssignment_5(), "rule__CompositeState__StatesAssignment_5");
					put(grammarAccess.getCompositeStateAccess().getInitialStateAssignment_6(), "rule__CompositeState__InitialStateAssignment_6");
					put(grammarAccess.getInitialStateAccess().getReferencedStateAssignment_3(), "rule__InitialState__ReferencedStateAssignment_3");
					put(grammarAccess.getOperationAccess().getContentsAssignment_3(), "rule__Operation__ContentsAssignment_3");
					put(grammarAccess.getOperationAccess().getContentsAssignment_4_1(), "rule__Operation__ContentsAssignment_4_1");
					put(grammarAccess.getBooleanAssignmentAccess().get_nameAssignment_1(), "rule__BooleanAssignment___nameAssignment_1");
					put(grammarAccess.getBooleanAssignmentAccess().getVariableAssignment_2(), "rule__BooleanAssignment__VariableAssignment_2");
					put(grammarAccess.getBooleanAssignmentAccess().getExpressionAssignment_4(), "rule__BooleanAssignment__ExpressionAssignment_4");
					put(grammarAccess.getIntegerAssignmentAccess().get_nameAssignment_1(), "rule__IntegerAssignment___nameAssignment_1");
					put(grammarAccess.getIntegerAssignmentAccess().getVariableAssignment_2(), "rule__IntegerAssignment__VariableAssignment_2");
					put(grammarAccess.getIntegerAssignmentAccess().getExpressionAssignment_4(), "rule__IntegerAssignment__ExpressionAssignment_4");
					put(grammarAccess.getTransitionAccess().getSourceAssignment_2(), "rule__Transition__SourceAssignment_2");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_4(), "rule__Transition__TargetAssignment_4");
					put(grammarAccess.getTransitionAccess().getEventAssignment_6(), "rule__Transition__EventAssignment_6");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.idm.projet.ui.contentassist.antlr.internal.InternalStateMachineParser typedParser = (org.xtext.idm.projet.ui.contentassist.antlr.internal.InternalStateMachineParser) parser;
			typedParser.entryRuleStateMachine();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public StateMachineGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(StateMachineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
