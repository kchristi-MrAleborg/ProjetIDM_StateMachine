/*
 * generated by Xtext
 */
package org.xtext.idm.projet.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class StateMachineGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateMachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariablesVariableParserRuleCall_4_0 = (RuleCall)cVariablesAssignment_4.eContents().get(0);
		private final Keyword cEventsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEventsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEventsEventParserRuleCall_7_0 = (RuleCall)cEventsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cEventsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_8_1_0 = (RuleCall)cEventsAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cStatesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStatesOneStateParserRuleCall_10_0 = (RuleCall)cStatesAssignment_10.eContents().get(0);
		private final Assignment cStatesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cStatesOneStateParserRuleCall_11_0 = (RuleCall)cStatesAssignment_11.eContents().get(0);
		private final Assignment cInitialStateAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cInitialStateInitialStateParserRuleCall_12_0 = (RuleCall)cInitialStateAssignment_12.eContents().get(0);
		private final Assignment cTransitionsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cTransitionsTransitionParserRuleCall_13_0 = (RuleCall)cTransitionsAssignment_13.eContents().get(0);
		private final Assignment cTransitionsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cTransitionsTransitionParserRuleCall_14_0 = (RuleCall)cTransitionsAssignment_14.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//StateMachine:
		//	{StateMachine} "StateMachine" name=ID "{" variables+=Variable* "events" "{" events+=Event ("," events+=Event)* "}"
		//	states+=oneState states+=oneState* initialState=InitialState transitions+=Transition transitions+=Transition* "}";
		@Override public ParserRule getRule() { return rule; }

		//{StateMachine} "StateMachine" name=ID "{" variables+=Variable* "events" "{" events+=Event ("," events+=Event)* "}"
		//states+=oneState states+=oneState* initialState=InitialState transitions+=Transition transitions+=Transition* "}"
		public Group getGroup() { return cGroup; }

		//{StateMachine}
		public Action getStateMachineAction_0() { return cStateMachineAction_0; }

		//"StateMachine"
		public Keyword getStateMachineKeyword_1() { return cStateMachineKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_4() { return cVariablesAssignment_4; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_4_0() { return cVariablesVariableParserRuleCall_4_0; }

		//"events"
		public Keyword getEventsKeyword_5() { return cEventsKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//events+=Event
		public Assignment getEventsAssignment_7() { return cEventsAssignment_7; }

		//Event
		public RuleCall getEventsEventParserRuleCall_7_0() { return cEventsEventParserRuleCall_7_0; }

		//("," events+=Event)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//events+=Event
		public Assignment getEventsAssignment_8_1() { return cEventsAssignment_8_1; }

		//Event
		public RuleCall getEventsEventParserRuleCall_8_1_0() { return cEventsEventParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//states+=oneState
		public Assignment getStatesAssignment_10() { return cStatesAssignment_10; }

		//oneState
		public RuleCall getStatesOneStateParserRuleCall_10_0() { return cStatesOneStateParserRuleCall_10_0; }

		//states+=oneState*
		public Assignment getStatesAssignment_11() { return cStatesAssignment_11; }

		//oneState
		public RuleCall getStatesOneStateParserRuleCall_11_0() { return cStatesOneStateParserRuleCall_11_0; }

		//initialState=InitialState
		public Assignment getInitialStateAssignment_12() { return cInitialStateAssignment_12; }

		//InitialState
		public RuleCall getInitialStateInitialStateParserRuleCall_12_0() { return cInitialStateInitialStateParserRuleCall_12_0; }

		//transitions+=Transition
		public Assignment getTransitionsAssignment_13() { return cTransitionsAssignment_13; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_13_0() { return cTransitionsTransitionParserRuleCall_13_0; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_14() { return cTransitionsAssignment_14; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_14_0() { return cTransitionsTransitionParserRuleCall_14_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//	integerVariable | booleanVariable;
		@Override public ParserRule getRule() { return rule; }

		//integerVariable | booleanVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//integerVariable
		public RuleCall getIntegerVariableParserRuleCall_0() { return cIntegerVariableParserRuleCall_0; }

		//booleanVariable
		public RuleCall getBooleanVariableParserRuleCall_1() { return cBooleanVariableParserRuleCall_1; }
	}

	public class IntegerVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "integerVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIntegerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueIntegerDataParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		
		//integerVariable returns IntegerVariable:
		//	{IntegerVariable} "var" name=ID ":" "integer" (":=" value=integerData)?;
		@Override public ParserRule getRule() { return rule; }

		//{IntegerVariable} "var" name=ID ":" "integer" (":=" value=integerData)?
		public Group getGroup() { return cGroup; }

		//{IntegerVariable}
		public Action getIntegerVariableAction_0() { return cIntegerVariableAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//"integer"
		public Keyword getIntegerKeyword_4() { return cIntegerKeyword_4; }

		//(":=" value=integerData)?
		public Group getGroup_5() { return cGroup_5; }

		//":="
		public Keyword getColonEqualsSignKeyword_5_0() { return cColonEqualsSignKeyword_5_0; }

		//value=integerData
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//integerData
		public RuleCall getValueIntegerDataParserRuleCall_5_1_0() { return cValueIntegerDataParserRuleCall_5_1_0; }
	}

	public class BooleanVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "booleanVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cBooleanKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueBooleanDataParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		
		//booleanVariable returns BooleanVariable:
		//	{BooleanVariable} "var" name=ID ":" "boolean" (":=" value=booleanData)?;
		@Override public ParserRule getRule() { return rule; }

		//{BooleanVariable} "var" name=ID ":" "boolean" (":=" value=booleanData)?
		public Group getGroup() { return cGroup; }

		//{BooleanVariable}
		public Action getBooleanVariableAction_0() { return cBooleanVariableAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//"boolean"
		public Keyword getBooleanKeyword_4() { return cBooleanKeyword_4; }

		//(":=" value=booleanData)?
		public Group getGroup_5() { return cGroup_5; }

		//":="
		public Keyword getColonEqualsSignKeyword_5_0() { return cColonEqualsSignKeyword_5_0; }

		//value=booleanData
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//booleanData
		public RuleCall getValueBooleanDataParserRuleCall_5_1_0() { return cValueBooleanDataParserRuleCall_5_1_0; }
	}

	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Data");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanDataParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Data:
		//	integerData | booleanData;
		@Override public ParserRule getRule() { return rule; }

		//integerData | booleanData
		public Alternatives getAlternatives() { return cAlternatives; }

		//integerData
		public RuleCall getIntegerDataParserRuleCall_0() { return cIntegerDataParserRuleCall_0; }

		//booleanData
		public RuleCall getBooleanDataParserRuleCall_1() { return cBooleanDataParserRuleCall_1; }
	}

	public class IntegerDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "integerData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerDataAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//integerData returns IntegerData:
		//	{IntegerData} value=INT;
		@Override public ParserRule getRule() { return rule; }

		//{IntegerData} value=INT
		public Group getGroup() { return cGroup; }

		//{IntegerData}
		public Action getIntegerDataAction_0() { return cIntegerDataAction_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class BooleanDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "booleanData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanDataAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBoolParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//booleanData returns BooleanData:
		//	{BooleanData} value=Bool;
		@Override public ParserRule getRule() { return rule; }

		//{BooleanData} value=Bool
		public Group getGroup() { return cGroup; }

		//{BooleanData}
		public Action getBooleanDataAction_0() { return cBooleanDataAction_0; }

		//value=Bool
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Bool
		public RuleCall getValueBoolParserRuleCall_1_0() { return cValueBoolParserRuleCall_1_0; }
	}

	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Bool returns ecore::EBoolean:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Event:
		//	{Event} name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{Event} name=STRING
		public Group getGroup() { return cGroup; }

		//{Event}
		public Action getEventAction_0() { return cEventAction_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class OneStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oneState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//oneState returns State:
		//	State | CompositeState;
		@Override public ParserRule getRule() { return rule; }

		//State | CompositeState
		public Alternatives getAlternatives() { return cAlternatives; }

		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }

		//CompositeState
		public RuleCall getCompositeStateParserRuleCall_1() { return cCompositeStateParserRuleCall_1; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationOperationParserRuleCall_4_0 = (RuleCall)cOperationAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State:
		//	{State} "state" name=ID "{" operation=Operation? "}";
		@Override public ParserRule getRule() { return rule; }

		//{State} "state" name=ID "{" operation=Operation? "}"
		public Group getGroup() { return cGroup; }

		//{State}
		public Action getStateAction_0() { return cStateAction_0; }

		//"state"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//operation=Operation?
		public Assignment getOperationAssignment_4() { return cOperationAssignment_4; }

		//Operation
		public RuleCall getOperationOperationParserRuleCall_4_0() { return cOperationOperationParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class CompositeStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesStateParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		private final Assignment cInitialStateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInitialStateInitialStateParserRuleCall_6_0 = (RuleCall)cInitialStateAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CompositeState:
		//	{CompositeState} "state" name=ID "{" //operation=Operation
		//	states+=State states+=State* initialState=InitialState "}";
		@Override public ParserRule getRule() { return rule; }

		//{CompositeState} "state" name=ID "{" //operation=Operation
		//states+=State states+=State* initialState=InitialState "}"
		public Group getGroup() { return cGroup; }

		//{CompositeState}
		public Action getCompositeStateAction_0() { return cCompositeStateAction_0; }

		//"state"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		////operation=Operation
		//states+=State
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }

		//State
		public RuleCall getStatesStateParserRuleCall_4_0() { return cStatesStateParserRuleCall_4_0; }

		//states+=State*
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }

		//State
		public RuleCall getStatesStateParserRuleCall_5_0() { return cStatesStateParserRuleCall_5_0; }

		//initialState=InitialState
		public Assignment getInitialStateAssignment_6() { return cInitialStateAssignment_6; }

		//InitialState
		public RuleCall getInitialStateInitialStateParserRuleCall_6_0() { return cInitialStateInitialStateParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class InitialStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitialState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReferencedStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferencedStateStateCrossReference_3_0 = (CrossReference)cReferencedStateAssignment_3.eContents().get(0);
		private final RuleCall cReferencedStateStateIDTerminalRuleCall_3_0_1 = (RuleCall)cReferencedStateStateCrossReference_3_0.eContents().get(1);
		
		//InitialState:
		//	{InitialState} "init" "with" referencedState=[State];
		@Override public ParserRule getRule() { return rule; }

		//{InitialState} "init" "with" referencedState=[State]
		public Group getGroup() { return cGroup; }

		//{InitialState}
		public Action getInitialStateAction_0() { return cInitialStateAction_0; }

		//"init"
		public Keyword getInitKeyword_1() { return cInitKeyword_1; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//referencedState=[State]
		public Assignment getReferencedStateAssignment_3() { return cReferencedStateAssignment_3; }

		//[State]
		public CrossReference getReferencedStateStateCrossReference_3_0() { return cReferencedStateStateCrossReference_3_0; }

		//ID
		public RuleCall getReferencedStateStateIDTerminalRuleCall_3_0_1() { return cReferencedStateStateIDTerminalRuleCall_3_0_1; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentsAssignmentParserRuleCall_3_0 = (RuleCall)cContentsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContentsAssignmentParserRuleCall_4_1_0 = (RuleCall)cContentsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Operation:
		//	{Operation} "do" "{" contents+=Assignment (";" contents+=Assignment)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Operation} "do" "{" contents+=Assignment (";" contents+=Assignment)* "}"
		public Group getGroup() { return cGroup; }

		//{Operation}
		public Action getOperationAction_0() { return cOperationAction_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//contents+=Assignment
		public Assignment getContentsAssignment_3() { return cContentsAssignment_3; }

		//Assignment
		public RuleCall getContentsAssignmentParserRuleCall_3_0() { return cContentsAssignmentParserRuleCall_3_0; }

		//(";" contents+=Assignment)*
		public Group getGroup_4() { return cGroup_4; }

		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }

		//contents+=Assignment
		public Assignment getContentsAssignment_4_1() { return cContentsAssignment_4_1; }

		//Assignment
		public RuleCall getContentsAssignmentParserRuleCall_4_1_0() { return cContentsAssignmentParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Assignment:
		//	BooleanAssignment | IntegerAssignment;
		@Override public ParserRule getRule() { return rule; }

		//BooleanAssignment | IntegerAssignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanAssignment
		public RuleCall getBooleanAssignmentParserRuleCall_0() { return cBooleanAssignmentParserRuleCall_0; }

		//IntegerAssignment
		public RuleCall getIntegerAssignmentParserRuleCall_1() { return cIntegerAssignmentParserRuleCall_1; }
	}

	public class BooleanAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment c_nameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c_nameSTRINGTerminalRuleCall_1_0 = (RuleCall)c_nameAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariableBooleanVariableCrossReference_2_0 = (CrossReference)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cVariableBooleanVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVariableBooleanVariableCrossReference_2_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionBooleanDataParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//BooleanAssignment returns Assignment:
		//	{Assignment} _name=STRING? variable=[BooleanVariable] ":=" expression=booleanData;
		@Override public ParserRule getRule() { return rule; }

		//{Assignment} _name=STRING? variable=[BooleanVariable] ":=" expression=booleanData
		public Group getGroup() { return cGroup; }

		//{Assignment}
		public Action getAssignmentAction_0() { return cAssignmentAction_0; }

		//_name=STRING?
		public Assignment get_nameAssignment_1() { return c_nameAssignment_1; }

		//STRING
		public RuleCall get_nameSTRINGTerminalRuleCall_1_0() { return c_nameSTRINGTerminalRuleCall_1_0; }

		//variable=[BooleanVariable]
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//[BooleanVariable]
		public CrossReference getVariableBooleanVariableCrossReference_2_0() { return cVariableBooleanVariableCrossReference_2_0; }

		//ID
		public RuleCall getVariableBooleanVariableIDTerminalRuleCall_2_0_1() { return cVariableBooleanVariableIDTerminalRuleCall_2_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//expression=booleanData
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//booleanData
		public RuleCall getExpressionBooleanDataParserRuleCall_4_0() { return cExpressionBooleanDataParserRuleCall_4_0; }
	}

	public class IntegerAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment c_nameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c_nameSTRINGTerminalRuleCall_1_0 = (RuleCall)c_nameAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariableIntegerVariableCrossReference_2_0 = (CrossReference)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cVariableIntegerVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVariableIntegerVariableCrossReference_2_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionIntegerDataParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//IntegerAssignment returns Assignment:
		//	{Assignment} _name=STRING? variable=[IntegerVariable] ":=" expression=integerData;
		@Override public ParserRule getRule() { return rule; }

		//{Assignment} _name=STRING? variable=[IntegerVariable] ":=" expression=integerData
		public Group getGroup() { return cGroup; }

		//{Assignment}
		public Action getAssignmentAction_0() { return cAssignmentAction_0; }

		//_name=STRING?
		public Assignment get_nameAssignment_1() { return c_nameAssignment_1; }

		//STRING
		public RuleCall get_nameSTRINGTerminalRuleCall_1_0() { return c_nameSTRINGTerminalRuleCall_1_0; }

		//variable=[IntegerVariable]
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//[IntegerVariable]
		public CrossReference getVariableIntegerVariableCrossReference_2_0() { return cVariableIntegerVariableCrossReference_2_0; }

		//ID
		public RuleCall getVariableIntegerVariableIDTerminalRuleCall_2_0_1() { return cVariableIntegerVariableIDTerminalRuleCall_2_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//expression=integerData
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//integerData
		public RuleCall getExpressionIntegerDataParserRuleCall_4_0() { return cExpressionIntegerDataParserRuleCall_4_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceStateCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceStateIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceStateCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetStateCrossReference_4_0.eContents().get(1);
		private final Keyword cForKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEventAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cEventEventCrossReference_6_0 = (CrossReference)cEventAssignment_6.eContents().get(0);
		private final RuleCall cEventEventSTRINGTerminalRuleCall_6_0_1 = (RuleCall)cEventEventCrossReference_6_0.eContents().get(1);
		
		/// *StateMachine returns StateMachine:
		//	isActive?='isActive'
		//	'StateMachine'
		//	name=EString
		//	'{'
		//		('operation' operation=Operation)?
		//		'states' '{' states+=State ( "," states+=State)* '}' 
		//		'initialState' initialState=InitialState
		//		'transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' 
		//		'events' '{' events+=Event ( "," events+=Event)* '}' 
		//		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?
		//	'}';
		//
		//
		//State returns State:
		//	State_Impl | StateMachine | CompositeState_Impl;
		//
		//
		//
		//
		//Variable returns Variable:
		//	BooleanVariable | IntegerVariable;
		//
		//
		//
		//ExpressionElement returns ExpressionElement:
		//	Expression | BooleanData | IntegerData | VariableReference;
		//
		//Data returns Data:
		//	BooleanData | IntegerData;
		//
		//EString returns ecore::EString:
		//	STRING | ID;
		//
		//EBoolean returns ecore::EBoolean:
		//	'true' | 'false';
		//
		//Operation returns Operation:
		//	{Operation}
		//	'Operation'
		//	'{'
		//		('contents' '{' contents+=Assignment ( "," contents+=Assignment)* '}' )?
		//	'}';
		//
		//State_Impl returns State:
		//	isActive?='isActive'
		//	'State'
		//	name=EString
		//	'{'
		//		('operation' operation=Operation)?
		//	'}';
		//
		//InitialState returns InitialState:
		//	'InitialState'
		//	'{'
		//		'referencedState' referencedState=[State|EString]
		//	'}';
		//
		//Transition returns Transition:
		//	'Transition'
		//	'{'
		//		'source' source=[State|EString]
		//		'target' target=[State|EString]
		//		'event' event=[Event|EString]
		//		('guard' guard=Expression)?
		//	'}';
		//
		//Event returns Event:
		//	{Event}
		//	'Event'
		//	name=EString;
		//
		//Assignment returns Assignment:
		//	'Assignment'
		//	'{'
		//		('_name' _name=EString)?
		//		'variable' variable=[Variable|EString]
		//		'expression' expression=ExpressionElement
		//	'}';
		//
		//Expression returns Expression:
		//	'Expression'
		//	'{'
		//		'operator' operator=Operator
		//		('_name' _name=EString)?
		//		'left' left=ExpressionElement
		//		'right' right=ExpressionElement
		//	'}';
		//
		//BooleanData returns BooleanData:
		//	value?='value'
		//	'BooleanData'
		//	;
		//
		//IntegerData returns IntegerData:
		//	'IntegerData'
		//	'{'
		//		'value' value=EInt
		//	'}';
		//
		//VariableReference returns VariableReference:
		//	'VariableReference'
		//	'{'
		//		('_name' _name=EString)?
		//		'variable' variable=[Variable|EString]
		//	'}';
		//
		//enum Operator returns Operator:
		//				add = 'add' | sub = 'sub' | eq = 'eq' | mul = 'mul' | gt = 'gt' | lt = 'lt' | lte = 'lte' | gte = 'gte' | div = 'div' | and = 'and' | neq = 'neq' | or = 'or' | not = 'not';
		//
		//EInt returns ecore::EInt:
		//	'-'? INT;
		//
		//CompositeState_Impl returns CompositeState:
		//	isActive?='isActive'
		//	'CompositeState'
		//	name=EString
		//	'{'
		//		('operation' operation=Operation)?
		//		'states' '{' states+=State ( "," states+=State)* '}' 
		//		'initialState' initialState=InitialState
		//	'}';
		//
		//BooleanVariable returns BooleanVariable:
		//	{BooleanVariable}
		//	'BooleanVariable'
		//	name=EString
		//	'{'
		//		('value' value=Data)?
		//	'}';
		//
		//IntegerVariable returns IntegerVariable:
		//	{IntegerVariable}
		//	'IntegerVariable'
		//	name=EString
		//	'{'
		//		('value' value=Data)?
		//	'}';* / Transition:
		//	{Transition} "from" source=[State] "to" target=[State] "for" event=[Event|STRING];
		@Override public ParserRule getRule() { return rule; }

		//{Transition} "from" source=[State] "to" target=[State] "for" event=[Event|STRING]
		public Group getGroup() { return cGroup; }

		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//source=[State]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[State]
		public CrossReference getSourceStateCrossReference_2_0() { return cSourceStateCrossReference_2_0; }

		//ID
		public RuleCall getSourceStateIDTerminalRuleCall_2_0_1() { return cSourceStateIDTerminalRuleCall_2_0_1; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//target=[State]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[State]
		public CrossReference getTargetStateCrossReference_4_0() { return cTargetStateCrossReference_4_0; }

		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_4_0_1() { return cTargetStateIDTerminalRuleCall_4_0_1; }

		//"for"
		public Keyword getForKeyword_5() { return cForKeyword_5; }

		//event=[Event|STRING]
		public Assignment getEventAssignment_6() { return cEventAssignment_6; }

		//[Event|STRING]
		public CrossReference getEventEventCrossReference_6_0() { return cEventEventCrossReference_6_0; }

		//STRING
		public RuleCall getEventEventSTRINGTerminalRuleCall_6_0_1() { return cEventEventSTRINGTerminalRuleCall_6_0_1; }
	}
	
	
	private final StateMachineElements pStateMachine;
	private final VariableElements pVariable;
	private final IntegerVariableElements pIntegerVariable;
	private final BooleanVariableElements pBooleanVariable;
	private final DataElements pData;
	private final IntegerDataElements pIntegerData;
	private final BooleanDataElements pBooleanData;
	private final BoolElements pBool;
	private final EventElements pEvent;
	private final OneStateElements pOneState;
	private final StateElements pState;
	private final CompositeStateElements pCompositeState;
	private final InitialStateElements pInitialState;
	private final OperationElements pOperation;
	private final AssignmentElements pAssignment;
	private final BooleanAssignmentElements pBooleanAssignment;
	private final IntegerAssignmentElements pIntegerAssignment;
	private final TransitionElements pTransition;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateMachineGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStateMachine = new StateMachineElements();
		this.pVariable = new VariableElements();
		this.pIntegerVariable = new IntegerVariableElements();
		this.pBooleanVariable = new BooleanVariableElements();
		this.pData = new DataElements();
		this.pIntegerData = new IntegerDataElements();
		this.pBooleanData = new BooleanDataElements();
		this.pBool = new BoolElements();
		this.pEvent = new EventElements();
		this.pOneState = new OneStateElements();
		this.pState = new StateElements();
		this.pCompositeState = new CompositeStateElements();
		this.pInitialState = new InitialStateElements();
		this.pOperation = new OperationElements();
		this.pAssignment = new AssignmentElements();
		this.pBooleanAssignment = new BooleanAssignmentElements();
		this.pIntegerAssignment = new IntegerAssignmentElements();
		this.pTransition = new TransitionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.idm.projet.StateMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StateMachine:
	//	{StateMachine} "StateMachine" name=ID "{" variables+=Variable* "events" "{" events+=Event ("," events+=Event)* "}"
	//	states+=oneState states+=oneState* initialState=InitialState transitions+=Transition transitions+=Transition* "}";
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}

	//Variable:
	//	integerVariable | booleanVariable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//integerVariable returns IntegerVariable:
	//	{IntegerVariable} "var" name=ID ":" "integer" (":=" value=integerData)?;
	public IntegerVariableElements getIntegerVariableAccess() {
		return pIntegerVariable;
	}
	
	public ParserRule getIntegerVariableRule() {
		return getIntegerVariableAccess().getRule();
	}

	//booleanVariable returns BooleanVariable:
	//	{BooleanVariable} "var" name=ID ":" "boolean" (":=" value=booleanData)?;
	public BooleanVariableElements getBooleanVariableAccess() {
		return pBooleanVariable;
	}
	
	public ParserRule getBooleanVariableRule() {
		return getBooleanVariableAccess().getRule();
	}

	//Data:
	//	integerData | booleanData;
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}

	//integerData returns IntegerData:
	//	{IntegerData} value=INT;
	public IntegerDataElements getIntegerDataAccess() {
		return pIntegerData;
	}
	
	public ParserRule getIntegerDataRule() {
		return getIntegerDataAccess().getRule();
	}

	//booleanData returns BooleanData:
	//	{BooleanData} value=Bool;
	public BooleanDataElements getBooleanDataAccess() {
		return pBooleanData;
	}
	
	public ParserRule getBooleanDataRule() {
		return getBooleanDataAccess().getRule();
	}

	//Bool returns ecore::EBoolean:
	//	"true" | "false";
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}

	//Event:
	//	{Event} name=STRING;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//oneState returns State:
	//	State | CompositeState;
	public OneStateElements getOneStateAccess() {
		return pOneState;
	}
	
	public ParserRule getOneStateRule() {
		return getOneStateAccess().getRule();
	}

	//State:
	//	{State} "state" name=ID "{" operation=Operation? "}";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//CompositeState:
	//	{CompositeState} "state" name=ID "{" //operation=Operation
	//	states+=State states+=State* initialState=InitialState "}";
	public CompositeStateElements getCompositeStateAccess() {
		return pCompositeState;
	}
	
	public ParserRule getCompositeStateRule() {
		return getCompositeStateAccess().getRule();
	}

	//InitialState:
	//	{InitialState} "init" "with" referencedState=[State];
	public InitialStateElements getInitialStateAccess() {
		return pInitialState;
	}
	
	public ParserRule getInitialStateRule() {
		return getInitialStateAccess().getRule();
	}

	//Operation:
	//	{Operation} "do" "{" contents+=Assignment (";" contents+=Assignment)* "}";
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Assignment:
	//	BooleanAssignment | IntegerAssignment;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//BooleanAssignment returns Assignment:
	//	{Assignment} _name=STRING? variable=[BooleanVariable] ":=" expression=booleanData;
	public BooleanAssignmentElements getBooleanAssignmentAccess() {
		return pBooleanAssignment;
	}
	
	public ParserRule getBooleanAssignmentRule() {
		return getBooleanAssignmentAccess().getRule();
	}

	//IntegerAssignment returns Assignment:
	//	{Assignment} _name=STRING? variable=[IntegerVariable] ":=" expression=integerData;
	public IntegerAssignmentElements getIntegerAssignmentAccess() {
		return pIntegerAssignment;
	}
	
	public ParserRule getIntegerAssignmentRule() {
		return getIntegerAssignmentAccess().getRule();
	}

	/// *StateMachine returns StateMachine:
	//	isActive?='isActive'
	//	'StateMachine'
	//	name=EString
	//	'{'
	//		('operation' operation=Operation)?
	//		'states' '{' states+=State ( "," states+=State)* '}' 
	//		'initialState' initialState=InitialState
	//		'transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' 
	//		'events' '{' events+=Event ( "," events+=Event)* '}' 
	//		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?
	//	'}';
	//
	//
	//State returns State:
	//	State_Impl | StateMachine | CompositeState_Impl;
	//
	//
	//
	//
	//Variable returns Variable:
	//	BooleanVariable | IntegerVariable;
	//
	//
	//
	//ExpressionElement returns ExpressionElement:
	//	Expression | BooleanData | IntegerData | VariableReference;
	//
	//Data returns Data:
	//	BooleanData | IntegerData;
	//
	//EString returns ecore::EString:
	//	STRING | ID;
	//
	//EBoolean returns ecore::EBoolean:
	//	'true' | 'false';
	//
	//Operation returns Operation:
	//	{Operation}
	//	'Operation'
	//	'{'
	//		('contents' '{' contents+=Assignment ( "," contents+=Assignment)* '}' )?
	//	'}';
	//
	//State_Impl returns State:
	//	isActive?='isActive'
	//	'State'
	//	name=EString
	//	'{'
	//		('operation' operation=Operation)?
	//	'}';
	//
	//InitialState returns InitialState:
	//	'InitialState'
	//	'{'
	//		'referencedState' referencedState=[State|EString]
	//	'}';
	//
	//Transition returns Transition:
	//	'Transition'
	//	'{'
	//		'source' source=[State|EString]
	//		'target' target=[State|EString]
	//		'event' event=[Event|EString]
	//		('guard' guard=Expression)?
	//	'}';
	//
	//Event returns Event:
	//	{Event}
	//	'Event'
	//	name=EString;
	//
	//Assignment returns Assignment:
	//	'Assignment'
	//	'{'
	//		('_name' _name=EString)?
	//		'variable' variable=[Variable|EString]
	//		'expression' expression=ExpressionElement
	//	'}';
	//
	//Expression returns Expression:
	//	'Expression'
	//	'{'
	//		'operator' operator=Operator
	//		('_name' _name=EString)?
	//		'left' left=ExpressionElement
	//		'right' right=ExpressionElement
	//	'}';
	//
	//BooleanData returns BooleanData:
	//	value?='value'
	//	'BooleanData'
	//	;
	//
	//IntegerData returns IntegerData:
	//	'IntegerData'
	//	'{'
	//		'value' value=EInt
	//	'}';
	//
	//VariableReference returns VariableReference:
	//	'VariableReference'
	//	'{'
	//		('_name' _name=EString)?
	//		'variable' variable=[Variable|EString]
	//	'}';
	//
	//enum Operator returns Operator:
	//				add = 'add' | sub = 'sub' | eq = 'eq' | mul = 'mul' | gt = 'gt' | lt = 'lt' | lte = 'lte' | gte = 'gte' | div = 'div' | and = 'and' | neq = 'neq' | or = 'or' | not = 'not';
	//
	//EInt returns ecore::EInt:
	//	'-'? INT;
	//
	//CompositeState_Impl returns CompositeState:
	//	isActive?='isActive'
	//	'CompositeState'
	//	name=EString
	//	'{'
	//		('operation' operation=Operation)?
	//		'states' '{' states+=State ( "," states+=State)* '}' 
	//		'initialState' initialState=InitialState
	//	'}';
	//
	//BooleanVariable returns BooleanVariable:
	//	{BooleanVariable}
	//	'BooleanVariable'
	//	name=EString
	//	'{'
	//		('value' value=Data)?
	//	'}';
	//
	//IntegerVariable returns IntegerVariable:
	//	{IntegerVariable}
	//	'IntegerVariable'
	//	name=EString
	//	'{'
	//		('value' value=Data)?
	//	'}';* / Transition:
	//	{Transition} "from" source=[State] "to" target=[State] "for" event=[Event|STRING];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
