// automatically generated by Xtext
grammar org.xtext.idm.projet.StateMachine with org.eclipse.xtext.common.Terminals

import "http://StateMachine.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

StateMachine returns StateMachine :
	{StateMachine}
	'StateMachine'
	name=ID
	'{'
		(variables+=Variable)*
		'events' '{' events+=Event (',' events+=Event)* '}'
		states+=oneState (states+=oneState)*
		initialState=InitialState
		transitions+=Transition (transitions+=Transition)*
	'}'
;

Variable returns Variable :
	integerVariable | booleanVariable
;

integerVariable returns IntegerVariable :
	{IntegerVariable}
	'var' name=ID ':' 'integer' (':=' value=integerData)? 	
;

booleanVariable returns BooleanVariable :
	{BooleanVariable}
	'var' name=ID ':' 'boolean' (':=' value=booleanData)? 	
;

Data returns Data :
	integerData | booleanData
;

integerData returns IntegerData :
	{IntegerData}
	value=INT
;

booleanData returns BooleanData :
	{BooleanData}
	value=Bool
;

Bool returns ecore::EBoolean :
	'true' | 'false'
;

Event returns Event :
	{Event}
	name=STRING
;

oneState returns State :
	State | CompositeState
;

State returns State :
	{State}
	'state'
	name=ID
	'{'
		(operation=Operation)?
	'}'
;

CompositeState returns CompositeState :
	{CompositeState}
	'state'
	name=ID
	'{'
		//operation=Operation
		states+=State (states+=State)*
		initialState=InitialState		
	'}'
;

InitialState returns InitialState :
	{InitialState}
	'init' 'with' referencedState = [State|ID]
;


Operation returns Operation :
	{Operation}
	'do'
	'{'
		contents+=Assignment (';'contents+=Assignment)* 
	'}'
;

Assignment returns Assignment :
	BooleanAssignment | IntegerAssignment
;

BooleanAssignment returns Assignment:
	{Assignment}
	(_name=STRING)?
	variable=[BooleanVariable|ID] ':=' expression=booleanData
;

IntegerAssignment returns Assignment :
	{Assignment}
	(_name=STRING)?
	variable=[IntegerVariable|ID] ':=' expression=integerData
;


Transition returns Transition :
	{Transition}
	'from' source=[State] 'to' target=[State] 'for' event=[Event|STRING]	
;

/*StateMachine returns StateMachine:
	isActive?='isActive'
	'StateMachine'
	name=EString
	'{'
		('operation' operation=Operation)?
		'states' '{' states+=State ( "," states+=State)* '}' 
		'initialState' initialState=InitialState
		'transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' 
		'events' '{' events+=Event ( "," events+=Event)* '}' 
		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?
	'}';


State returns State:
	State_Impl | StateMachine | CompositeState_Impl;




Variable returns Variable:
	BooleanVariable | IntegerVariable;



ExpressionElement returns ExpressionElement:
	Expression | BooleanData | IntegerData | VariableReference;

Data returns Data:
	BooleanData | IntegerData;

EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Operation returns Operation:
	{Operation}
	'Operation'
	'{'
		('contents' '{' contents+=Assignment ( "," contents+=Assignment)* '}' )?
	'}';

State_Impl returns State:
	isActive?='isActive'
	'State'
	name=EString
	'{'
		('operation' operation=Operation)?
	'}';

InitialState returns InitialState:
	'InitialState'
	'{'
		'referencedState' referencedState=[State|EString]
	'}';

Transition returns Transition:
	'Transition'
	'{'
		'source' source=[State|EString]
		'target' target=[State|EString]
		'event' event=[Event|EString]
		('guard' guard=Expression)?
	'}';

Event returns Event:
	{Event}
	'Event'
	name=EString;

Assignment returns Assignment:
	'Assignment'
	'{'
		('_name' _name=EString)?
		'variable' variable=[Variable|EString]
		'expression' expression=ExpressionElement
	'}';

Expression returns Expression:
	'Expression'
	'{'
		'operator' operator=Operator
		('_name' _name=EString)?
		'left' left=ExpressionElement
		'right' right=ExpressionElement
	'}';

BooleanData returns BooleanData:
	value?='value'
	'BooleanData'
	;

IntegerData returns IntegerData:
	'IntegerData'
	'{'
		'value' value=EInt
	'}';

VariableReference returns VariableReference:
	'VariableReference'
	'{'
		('_name' _name=EString)?
		'variable' variable=[Variable|EString]
	'}';

enum Operator returns Operator:
				add = 'add' | sub = 'sub' | eq = 'eq' | mul = 'mul' | gt = 'gt' | lt = 'lt' | lte = 'lte' | gte = 'gte' | div = 'div' | and = 'and' | neq = 'neq' | or = 'or' | not = 'not';

EInt returns ecore::EInt:
	'-'? INT;

CompositeState_Impl returns CompositeState:
	isActive?='isActive'
	'CompositeState'
	name=EString
	'{'
		('operation' operation=Operation)?
		'states' '{' states+=State ( "," states+=State)* '}' 
		'initialState' initialState=InitialState
	'}';

BooleanVariable returns BooleanVariable:
	{BooleanVariable}
	'BooleanVariable'
	name=EString
	'{'
		('value' value=Data)?
	'}';

IntegerVariable returns IntegerVariable:
	{IntegerVariable}
	'IntegerVariable'
	name=EString
	'{'
		('value' value=Data)?
	'}';*/
